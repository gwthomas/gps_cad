/* Auto-generated by genmsg_cpp for file /home/gwthomas/workspace/gps/src/gps_agent_pkg/msg/TrialCommand.msg */
#ifndef GPS_AGENT_PKG_MESSAGE_TRIALCOMMAND_H
#define GPS_AGENT_PKG_MESSAGE_TRIALCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "gps_agent_pkg/ControllerParams.h"

namespace gps_agent_pkg
{
template <class ContainerAllocator>
struct TrialCommand_ {
  typedef TrialCommand_<ContainerAllocator> Type;

  TrialCommand_()
  : id(0)
  , controller()
  , T(0)
  , frequency(0.0)
  , state_datatypes()
  , obs_datatypes()
  , ee_points()
  , ee_points_tgt()
  {
  }

  TrialCommand_(const ContainerAllocator& _alloc)
  : id(0)
  , controller(_alloc)
  , T(0)
  , frequency(0.0)
  , state_datatypes(_alloc)
  , obs_datatypes(_alloc)
  , ee_points(_alloc)
  , ee_points_tgt(_alloc)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef  ::gps_agent_pkg::ControllerParams_<ContainerAllocator>  _controller_type;
   ::gps_agent_pkg::ControllerParams_<ContainerAllocator>  controller;

  typedef int32_t _T_type;
  int32_t T;

  typedef double _frequency_type;
  double frequency;

  typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _state_datatypes_type;
  std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  state_datatypes;

  typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _obs_datatypes_type;
  std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  obs_datatypes;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ee_points_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  ee_points;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ee_points_tgt_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  ee_points_tgt;


  typedef boost::shared_ptr< ::gps_agent_pkg::TrialCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_agent_pkg::TrialCommand_<ContainerAllocator>  const> ConstPtr;
}; // struct TrialCommand
typedef  ::gps_agent_pkg::TrialCommand_<std::allocator<void> > TrialCommand;

typedef boost::shared_ptr< ::gps_agent_pkg::TrialCommand> TrialCommandPtr;
typedef boost::shared_ptr< ::gps_agent_pkg::TrialCommand const> TrialCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gps_agent_pkg::TrialCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gps_agent_pkg::TrialCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gps_agent_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::TrialCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::TrialCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_agent_pkg::TrialCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "04466b7105be234f831db431c410ea7a";
  }

  static const char* value(const  ::gps_agent_pkg::TrialCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x04466b7105be234fULL;
  static const uint64_t static_value2 = 0x831db431c410ea7aULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_agent_pkg::TrialCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_agent_pkg/TrialCommand";
  }

  static const char* value(const  ::gps_agent_pkg::TrialCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_agent_pkg::TrialCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message is published to the C++ controller to start\n\
# a trial\n\
int32 id  # ID must be echoed back in SampleResult\n\
ControllerParams controller\n\
\n\
# Trial information\n\
int32 T  # Trajectory length\n\
float64 frequency  # Controller frequency\n\
int8[] state_datatypes  # Which data types to include in state\n\
int8[] obs_datatypes # Which data types to include in observation\n\
float64[] ee_points # A 3*n_points array containing offsets\n\
float64[] ee_points_tgt # A 3*n_points array containing the desired ee_points for this trial\n\
\n\
================================================================================\n\
MSG: gps_agent_pkg/ControllerParams\n\
int8 controller_to_execute  # controller enum, defined in gps_pb2\n\
\n\
CaffeParams caffe\n\
LinGaussParams lingauss\n\
TfParams tf\n\
\n\
================================================================================\n\
MSG: gps_agent_pkg/CaffeParams\n\
string net_param # Serialized net parameter with weights (equivalent of prototxt file)\n\
float32[] bias\n\
float32[] scale\n\
float32[] noise\n\
int32 dim_bias\n\
uint32 dU\n\
\n\
================================================================================\n\
MSG: gps_agent_pkg/LinGaussParams\n\
# Time-varying Linear Gaussian controller\n\
uint32 dX\n\
uint32 dU\n\
float64[] K_t  # Should be T x Du x Dx\n\
float64[] k_t  # Should by T x Du\n\
\n\
================================================================================\n\
MSG: gps_agent_pkg/TfParams\n\
# Tf Params. just need to track dU.\n\
uint32 dU\n\
\n\
\n\
";
  }

  static const char* value(const  ::gps_agent_pkg::TrialCommand_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_agent_pkg::TrialCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.controller);
    stream.next(m.T);
    stream.next(m.frequency);
    stream.next(m.state_datatypes);
    stream.next(m.obs_datatypes);
    stream.next(m.ee_points);
    stream.next(m.ee_points_tgt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrialCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_agent_pkg::TrialCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gps_agent_pkg::TrialCommand_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "controller: ";
s << std::endl;
    Printer< ::gps_agent_pkg::ControllerParams_<ContainerAllocator> >::stream(s, indent + "  ", v.controller);
    s << indent << "T: ";
    Printer<int32_t>::stream(s, indent + "  ", v.T);
    s << indent << "frequency: ";
    Printer<double>::stream(s, indent + "  ", v.frequency);
    s << indent << "state_datatypes[]" << std::endl;
    for (size_t i = 0; i < v.state_datatypes.size(); ++i)
    {
      s << indent << "  state_datatypes[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.state_datatypes[i]);
    }
    s << indent << "obs_datatypes[]" << std::endl;
    for (size_t i = 0; i < v.obs_datatypes.size(); ++i)
    {
      s << indent << "  obs_datatypes[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.obs_datatypes[i]);
    }
    s << indent << "ee_points[]" << std::endl;
    for (size_t i = 0; i < v.ee_points.size(); ++i)
    {
      s << indent << "  ee_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ee_points[i]);
    }
    s << indent << "ee_points_tgt[]" << std::endl;
    for (size_t i = 0; i < v.ee_points_tgt.size(); ++i)
    {
      s << indent << "  ee_points_tgt[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ee_points_tgt[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPS_AGENT_PKG_MESSAGE_TRIALCOMMAND_H

