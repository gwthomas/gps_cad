/* Auto-generated by genmsg_cpp for file /home/gwthomas/workspace/gps/src/gps_agent_pkg/msg/SampleResult.msg */
#ifndef GPS_AGENT_PKG_MESSAGE_SAMPLERESULT_H
#define GPS_AGENT_PKG_MESSAGE_SAMPLERESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "gps_agent_pkg/DataType.h"

namespace gps_agent_pkg
{
template <class ContainerAllocator>
struct SampleResult_ {
  typedef SampleResult_<ContainerAllocator> Type;

  SampleResult_()
  : id(0)
  , sensor_data()
  {
  }

  SampleResult_(const ContainerAllocator& _alloc)
  : id(0)
  , sensor_data(_alloc)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef std::vector< ::gps_agent_pkg::DataType_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gps_agent_pkg::DataType_<ContainerAllocator> >::other >  _sensor_data_type;
  std::vector< ::gps_agent_pkg::DataType_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gps_agent_pkg::DataType_<ContainerAllocator> >::other >  sensor_data;


  typedef boost::shared_ptr< ::gps_agent_pkg::SampleResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_agent_pkg::SampleResult_<ContainerAllocator>  const> ConstPtr;
}; // struct SampleResult
typedef  ::gps_agent_pkg::SampleResult_<std::allocator<void> > SampleResult;

typedef boost::shared_ptr< ::gps_agent_pkg::SampleResult> SampleResultPtr;
typedef boost::shared_ptr< ::gps_agent_pkg::SampleResult const> SampleResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gps_agent_pkg::SampleResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gps_agent_pkg::SampleResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gps_agent_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::SampleResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::SampleResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_agent_pkg::SampleResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c54dfe2af7c83bf41623e1a91dae494d";
  }

  static const char* value(const  ::gps_agent_pkg::SampleResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc54dfe2af7c83bf4ULL;
  static const uint64_t static_value2 = 0x1623e1a91dae494dULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_agent_pkg::SampleResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_agent_pkg/SampleResult";
  }

  static const char* value(const  ::gps_agent_pkg::SampleResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_agent_pkg::SampleResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 id\n\
\n\
# Contains everything needed to reconstruct a Sample object\n\
DataType[] sensor_data\n\
\n\
================================================================================\n\
MSG: gps_agent_pkg/DataType\n\
int8 data_type  # enum of sample type of requested data, defined in gps_pb2\n\
float64[] data\n\
int32[] shape\n\
\n\
";
  }

  static const char* value(const  ::gps_agent_pkg::SampleResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_agent_pkg::SampleResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.sensor_data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SampleResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_agent_pkg::SampleResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gps_agent_pkg::SampleResult_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "sensor_data[]" << std::endl;
    for (size_t i = 0; i < v.sensor_data.size(); ++i)
    {
      s << indent << "  sensor_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gps_agent_pkg::DataType_<ContainerAllocator> >::stream(s, indent + "    ", v.sensor_data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPS_AGENT_PKG_MESSAGE_SAMPLERESULT_H

