/* Auto-generated by genmsg_cpp for file /home/gwthomas/workspace/gps/src/gps_agent_pkg/msg/CaffeParams.msg */
#ifndef GPS_AGENT_PKG_MESSAGE_CAFFEPARAMS_H
#define GPS_AGENT_PKG_MESSAGE_CAFFEPARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace gps_agent_pkg
{
template <class ContainerAllocator>
struct CaffeParams_ {
  typedef CaffeParams_<ContainerAllocator> Type;

  CaffeParams_()
  : net_param()
  , bias()
  , scale()
  , noise()
  , dim_bias(0)
  , dU(0)
  {
  }

  CaffeParams_(const ContainerAllocator& _alloc)
  : net_param(_alloc)
  , bias(_alloc)
  , scale(_alloc)
  , noise(_alloc)
  , dim_bias(0)
  , dU(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _net_param_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  net_param;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _bias_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  bias;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _scale_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  scale;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _noise_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  noise;

  typedef int32_t _dim_bias_type;
  int32_t dim_bias;

  typedef uint32_t _dU_type;
  uint32_t dU;


  typedef boost::shared_ptr< ::gps_agent_pkg::CaffeParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_agent_pkg::CaffeParams_<ContainerAllocator>  const> ConstPtr;
}; // struct CaffeParams
typedef  ::gps_agent_pkg::CaffeParams_<std::allocator<void> > CaffeParams;

typedef boost::shared_ptr< ::gps_agent_pkg::CaffeParams> CaffeParamsPtr;
typedef boost::shared_ptr< ::gps_agent_pkg::CaffeParams const> CaffeParamsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gps_agent_pkg::CaffeParams_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gps_agent_pkg::CaffeParams_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gps_agent_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::CaffeParams_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::CaffeParams_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_agent_pkg::CaffeParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "963140e466eb030de342c2ccf87872da";
  }

  static const char* value(const  ::gps_agent_pkg::CaffeParams_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x963140e466eb030dULL;
  static const uint64_t static_value2 = 0xe342c2ccf87872daULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_agent_pkg::CaffeParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_agent_pkg/CaffeParams";
  }

  static const char* value(const  ::gps_agent_pkg::CaffeParams_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_agent_pkg::CaffeParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string net_param # Serialized net parameter with weights (equivalent of prototxt file)\n\
float32[] bias\n\
float32[] scale\n\
float32[] noise\n\
int32 dim_bias\n\
uint32 dU\n\
\n\
";
  }

  static const char* value(const  ::gps_agent_pkg::CaffeParams_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_agent_pkg::CaffeParams_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.net_param);
    stream.next(m.bias);
    stream.next(m.scale);
    stream.next(m.noise);
    stream.next(m.dim_bias);
    stream.next(m.dU);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CaffeParams_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_agent_pkg::CaffeParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gps_agent_pkg::CaffeParams_<ContainerAllocator> & v) 
  {
    s << indent << "net_param: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.net_param);
    s << indent << "bias[]" << std::endl;
    for (size_t i = 0; i < v.bias.size(); ++i)
    {
      s << indent << "  bias[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bias[i]);
    }
    s << indent << "scale[]" << std::endl;
    for (size_t i = 0; i < v.scale.size(); ++i)
    {
      s << indent << "  scale[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.scale[i]);
    }
    s << indent << "noise[]" << std::endl;
    for (size_t i = 0; i < v.noise.size(); ++i)
    {
      s << indent << "  noise[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.noise[i]);
    }
    s << indent << "dim_bias: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dim_bias);
    s << indent << "dU: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dU);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPS_AGENT_PKG_MESSAGE_CAFFEPARAMS_H

