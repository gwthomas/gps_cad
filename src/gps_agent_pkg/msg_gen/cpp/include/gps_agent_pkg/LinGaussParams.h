/* Auto-generated by genmsg_cpp for file /home/melissachien/new_gps/src/gps_agent_pkg/msg/LinGaussParams.msg */
#ifndef GPS_AGENT_PKG_MESSAGE_LINGAUSSPARAMS_H
#define GPS_AGENT_PKG_MESSAGE_LINGAUSSPARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace gps_agent_pkg
{
template <class ContainerAllocator>
struct LinGaussParams_ {
  typedef LinGaussParams_<ContainerAllocator> Type;

  LinGaussParams_()
  : dX(0)
  , dU(0)
  , K_t()
  , k_t()
  {
  }

  LinGaussParams_(const ContainerAllocator& _alloc)
  : dX(0)
  , dU(0)
  , K_t(_alloc)
  , k_t(_alloc)
  {
  }

  typedef uint32_t _dX_type;
  uint32_t dX;

  typedef uint32_t _dU_type;
  uint32_t dU;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _K_t_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  K_t;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _k_t_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  k_t;


  typedef boost::shared_ptr< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator>  const> ConstPtr;
}; // struct LinGaussParams
typedef  ::gps_agent_pkg::LinGaussParams_<std::allocator<void> > LinGaussParams;

typedef boost::shared_ptr< ::gps_agent_pkg::LinGaussParams> LinGaussParamsPtr;
typedef boost::shared_ptr< ::gps_agent_pkg::LinGaussParams const> LinGaussParamsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gps_agent_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d59b25753e6e310cbad655a7176ffe29";
  }

  static const char* value(const  ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd59b25753e6e310cULL;
  static const uint64_t static_value2 = 0xbad655a7176ffe29ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_agent_pkg/LinGaussParams";
  }

  static const char* value(const  ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Time-varying Linear Gaussian controller\n\
uint32 dX\n\
uint32 dU\n\
float64[] K_t  # Should be T x Du x Dx\n\
float64[] k_t  # Should by T x Du\n\
\n\
";
  }

  static const char* value(const  ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dX);
    stream.next(m.dU);
    stream.next(m.K_t);
    stream.next(m.k_t);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LinGaussParams_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gps_agent_pkg::LinGaussParams_<ContainerAllocator> & v) 
  {
    s << indent << "dX: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dX);
    s << indent << "dU: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dU);
    s << indent << "K_t[]" << std::endl;
    for (size_t i = 0; i < v.K_t.size(); ++i)
    {
      s << indent << "  K_t[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.K_t[i]);
    }
    s << indent << "k_t[]" << std::endl;
    for (size_t i = 0; i < v.k_t.size(); ++i)
    {
      s << indent << "  k_t[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.k_t[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPS_AGENT_PKG_MESSAGE_LINGAUSSPARAMS_H

